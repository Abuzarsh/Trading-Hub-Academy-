const crypto = require("crypto");
const nodemailer = require("nodemailer");
const { connection } = require("../config/DbConnection"); // Assuming you have a DB connection file
const UserModel = require("../models/userModel");
const { setUser } = require("../utils/jwtHelper");

// Method to generate OTP
function generateOTP(req, res) {
  const email = req.body.email;

  const display_name = req.body.firstName + " " + req.body.lastName;

  if (!email) {
    return res.status(400).send({ message: "Email is required." });
  }

  // Function to generate a random user ID
  function generateRandomUserId() {
    return Math.floor(Math.random() * 90000) + 10000;
  }

  const userId = generateRandomUserId();
  const otp = crypto.randomInt(100000, 999999).toString(); // Generate a 6-digit OTP
  const createdAt = new Date();
  const expiresAt = new Date();
  expiresAt.setMinutes(expiresAt.getMinutes() + 5); // OTP expires in 5 minutes

  // Check if the email exists and insert/update details accordingly
  const checkEmailQuery = "SELECT 1 FROM tb_user_details WHERE email = ?";
  connection.query(checkEmailQuery, [email], (err, results) => {
    if (err) {
      return res
        .status(500)
        .send({ message: "Error checking email in database." });
    }

    console.log("Query results:", results); // Debugging

    if (results.length > 0) {
      // Email exists, update the OTP and timestamps
      const updateQuery =
        "UPDATE tb_user_details SET user_id = ?,display_name=? , otp = ?, otp_created_at = ?, otp_expires_at = ? WHERE email = ?";
      connection.query(
        updateQuery,
        [userId, display_name, otp, createdAt, expiresAt, email],
        (updateErr) => {
          if (updateErr) {
            return res
              .status(500)
              .send({ message: "Error updating OTP in database." });
          }

          // Send OTP email
          sendOtpEmail(userId, otp, email)
            .then(() => {
              res.status(200).send({
                message: "OTP updated and sent to your email.",
                userId,
              });
            })
            .catch(() => {
              res.status(500).send({
                message: "OTP updated but failed to send email.",
                userId,
              });
            });
        }
      );
    } else {
      // Email does not exist, insert a new record
      const insertQuery =
        "INSERT INTO tb_user_details (user_id,display_name, email, otp, otp_created_at, otp_expires_at) VALUES (?, ?, ?, ?, ?,?)";
      connection.query(
        insertQuery,
        [userId, display_name, email, otp, createdAt, expiresAt],
        (insertErr) => {
          if (insertErr) {
            return res
              .status(500)
              .send({ message: "Error inserting OTP in database." });
          }

          // Send OTP email
          sendOtpEmail(userId, otp, email)
            .then(() => {
              res.status(200).send({
                message: "OTP generated and sent to your email.",
                userId,
              });
            })
            .catch(() => {
              res.status(500).send({
                message: "OTP generated but failed to send email.",
                userId,
              });
            });
        }
      );
    }
  });
}

// Function to send OTP via email (Gmail example)
function sendOtpEmail(userId, otp, email) {
  return new Promise((resolve, reject) => {
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: process.env.SMTP_PORT,
      secure: process.env.SMTP_PORT == 465,
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
      connectionTimeout: 5000, // Increase connection timeout to 5 seconds
      socketTimeout: 5000, // Increase socket timeout to 5 seconds
    });

    const mailOptions = {
      from: `"Support | TradingHub" <${process.env.SMTP_USER}>`,
      to: email,
      subject: "Sign in OTP ",
      html: `
        <div>
          <h2>Hello,</h2>
          <p>Your OTP is: <strong>${otp}</strong></p>
          <p>This OTP is valid for 5 minutes.</p>

          <p><b><i>This is an autogenerated email and does not accept reply</i></b></p>

          <p><b>Support | Trading Hub Academy</b></p>
        </div>
      `,
    };

    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        reject(error);
      } else {
        resolve(info);
      }
    });
  });
}

// Method to verify OTP
function verifyOTP(req, res) {
  const { userId, userOtp } = req.body;

  const query =
    "SELECT user_id, display_name, email, otp_created_at, otp_expires_at FROM tb_user_details WHERE user_id = ? AND otp = ? ORDER BY otp_created_at DESC LIMIT 1";

  connection.query(query, [userId, userOtp], (err, results) => {
    if (err) {
      console.error("Error retrieving OTP from database:", err);
      return res
        .status(500)
        .send({ message: "Error retrieving OTP from database." });
    }

    if (results.length === 0) {
      return res
        .status(400)
        .send({ message: "No valid OTP found for this user." });
    }

    const otpRecord = results[0];
    const currentTime = new Date();
    if (currentTime > new Date(otpRecord.otp_expires_at)) {
      return res.status(400).send({ message: "OTP has expired." });
    }

    // OTP is valid, create a session
    req.session.userId = userId; // Set userId in session
    req.session.display_name = otpRecord.display_name; // Set display name
    req.session.email = otpRecord.email; // Set email

    // Calculate session expiration time
    const sessionExpiration = new Date(Date.now() + req.session.cookie.maxAge);

    const sessionData = JSON.stringify({
      display_name: otpRecord.display_name,
      email: otpRecord.email,
    });
    UserModel.UpdateSessionDetails(
      otpRecord.email,
      req.sessionID,
      sessionExpiration,
      sessionData
    )

      .then(() => {
        const token = setUser({
          display_name: otpRecord.display_name,
          email: otpRecord.email,
        });
        res.cookie("user", token, {
          sameSite: "None",
          secure: process.env.NODE_ENV === "production" ? true : false,
          expires: sessionExpiration,
        });
        res.status(200).send({
          message: "OTP verified successfully!",
          // user: sessionData,
        });
      })
      .catch((err) => {
        res.status(500).send({ message: "Error saving session to database." });
      });
  });
}

module.exports = { generateOTP, verifyOTP };
